plugins {
    id "dev.architectury.loom" version "0.10.0-SNAPSHOT"
    id 'maven-publish'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply from: 'https://files.latmod.com/public/markdown-git-changelog.gradle'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def ENV = System.getenv()

archivesBaseName = project.archives_base_name + "-build.${ENV.GITHUB_RUN_NUMBER ?: ENV.CI_PIPELINE_IID ?: 9999}"
version = project.mod_version
group = project.maven_group

loom {
    silentMojangMappingsLicense()

//    mixinConfigs = [
//            "examplemod.mixins.json"
//    ]

    forge {
        dataGen {
            mod project.mod_id
        }

        // This allows you to modify your launch configurations,
        // for example to add custom arguments. In this case, we want
        // the data generator to check our resources directory for
        // existing files. (see Forge's ExistingFileHelper for more info)
        launches {
            data {
                arg "--existing", file("src/main/resources").absolutePath
            }
        }
    }

    // missing access transformers?
    // don't worry, you can still use them!
    // note that your AT *MUST* be located at
    // src/main/resources/META-INF/accesstransformer.cfg
    // to work as there is currently no config option to change this.
    // also, any names used in your access transformer will need to be
    // in SRG mapped ("func_" / "field_" with MCP class names) to work!
    // (both of these things may be subject to change in the future)
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    // In this example, we need the following maven to satisfy
    // our dependency for Just Enough Items.
    maven {
        name = "Progwml6 (Just Enough Items)"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        url = "https://maven.parchmentmc.net/"
        content {
            includeGroup "org.parchmentmc.data"
        }
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // choose what mappings you want to use here
    // leave this uncommented if you want to use mojang's official mappings
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.16.5:2021.10.17")
    }
    // uncomment this if you want to use yarn mappings
    // mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // uncomment this if you want to use mcp mappings
    // mappings "de.oceanlabs.mcp:mcp_${project.mcp_channel}:${project.mcp_mappings}"

    // your forge dependency, this is **required** when using Forge Loom in forge mode!
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // additional dependencies can be specified using loom's regular format
    // specifying a "mod" dependency (like modImplementation or modApi)
    // will cause loom to remap the file to your specified mappings

    // in this example, we'll be adding JEI as a dependency
    // according to their developer example on GitHub
    // see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
    // compile against the JEI API but do not include it at runtime
    // don't worry about loom "not finding a forge mod" here,
    // JEI's api just doesn't have any class with an @Mod annotation
    modCompileOnly "curse.maven:botany-pots-353928:3283196"
    modCompileOnly "curse.maven:bookshelf-228525:3402183"
    modRuntimeOnly "curse.maven:botany-pots-353928:3272101"
    modRuntimeOnly "curse.maven:bookshelf-228525:3402183"

    modRuntimeOnly "curse.maven:mekanism-268560:3206392"

    modRuntimeOnly "curse.maven:refined-pipes-370696:3113506"
    modRuntimeOnly "curse.maven:pipez-443900:3491694"
    modRuntimeOnly "curse.maven:pretty-pipes-376737:3472990"
    // at runtime, use the full JEI jar
//    modRuntime "mezz.jei:jei-1.16.4:${jei_version}"
}

processResources {
    // define properties that can be used during resource processing
    inputs.property "version", project.version

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        if (ENV.SAPS_TOKEN) {
            maven {
                url "https://maven.saps.dev/minecraft"
                credentials {
                    username = "ftb"
                    password = "${ENV.SAPS_TOKEN}"
                }
            }
        }

        if (ENV.FTB_MAVEN_TOKEN) {
            maven {
                url "https://maven.ftb.dev/release"
                credentials {
                    username = "ftb"
                    password = "${ENV.FTB_MAVEN_TOKEN}"
                }
            }
        }
    }
}

if (ENV.CURSEFORGE_KEY) {
    curseforge {
        apiKey = ENV.CURSEFORGE_KEY
        project {
            id = project.curseforge_id
            releaseType = "beta"
            addGameVersion "Forge"
            addGameVersion "1.16.5"
            mainArtifact(remapJar.archivePath)
            changelog = getGitChangelog
            changelogType = 'markdown'
        }
    }
}